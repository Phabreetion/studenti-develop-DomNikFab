{"version":3,"sources":["webpack:///./src/app/pages/servizi/calendario/calendario.html","webpack:///./src/app/pages/servizi/calendario/calendario.module.ts","webpack:///./src/app/pages/servizi/calendario/calendario.ts"],"names":[],"mappings":";;;;;;;;;AAAA,iNAAiN,aAAa,4JAA4J,qzCAAqzC,+BAA+B,KAAK,6BAA6B,4LAA4L,aAAa,gMAAgM,eAAe,0LAA0L,YAAY,8KAA8K,eAAe,wF;;;;;;;;;;;;;;;;;;;;;;;;;;ACAl+E;AACM;AACF;AACA;AACE;AAED;AAgB9C;IAAA;IAAmC,CAAC;IAAvB,oBAAoB;QAdhC,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC;oBAClB;wBACI,IAAI,EAAE,EAAE;wBACR,SAAS,EAAE,0DAAc;qBAC5B;iBACJ,CAAC;aACL;YACD,YAAY,EAAE,CAAC,0DAAc,CAAC;SACjC,CAAC;OACW,oBAAoB,CAAG;IAAD,2BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBe;AAC6B;AAC7E,oCAAoC;AACuB;AACa;AACb;AAE3D;;;;;GAKG;AAMH;IAkBI,wBACW,SAAoB,EACpB,IAAiB,EACjB,IAAiB,EACjB,UAA6B,EAC7B,SAA0B,EAC1B,SAA0B;QAL1B,cAAS,GAAT,SAAS,CAAW;QACpB,SAAI,GAAJ,IAAI,CAAa;QACjB,SAAI,GAAJ,IAAI,CAAa;QACjB,eAAU,GAAV,UAAU,CAAmB;QAC7B,cAAS,GAAT,SAAS,CAAiB;QAC1B,cAAS,GAAT,SAAS,CAAiB;QAvBrC,eAAU,GAAG,EAAE,CAAC;QAChB,WAAM,GAAe,EAAE,CAAC;QAExB,gBAAW,GAAG,EAAE,CAAC;QAEjB,gBAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QACzB,4BAAuB,GAAG,KAAK,CAAC;QAEhC,aAAQ,GAAG;YACP,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,IAAI,IAAI,EAAE;YACvB,mBAAmB;YACnB,UAAU,EAAE,KAAK;YACjB,aAAa,EAAE,eAAe;SAEjC,CAAC;IASF,CAAC;IAGD,iCAAQ,GAAR;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QACzB,8BAA8B;IAClC,CAAC;IA/BQ,cAAc;QAJ1B,+DAAS,CAAC;YACP,QAAQ,EAAE,qBAAqB;YAC/B,4GAA8B;SACjC,CAAC;yCAoBwB,wDAAS;YACd,kEAAW;YACX,kEAAW;YACL,+EAAiB;YAClB,8DAAe;YACf,8DAAe;OAxB5B,cAAc,CA0M1B;IAAD,qBAAC;CAAA;AA1M0B","file":"pages-servizi-calendario-calendario-module.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n     <!-- <ion-label (click)=\\\"today()\\\"><b>{{ viewTitle }}</b></ion-label> -->\\n    </ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button>\\n       <!-- <ion-icon color=\\\"primary\\\" style=\\\"font-size: 28px;\\\" name=\\\"calendar\\\" (click)=\\\"today()\\\"></ion-icon> -->\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n\\n<ion-content no-padding>\\n<!--\\n  <calendar [locale]=\\\"calendar.locale\\\"\\n            [eventSource]=\\\"eventSource\\\"\\n            [calendarMode]=\\\"calendar.mode\\\"\\n            [currentDate]=\\\"calendar.currentDate\\\"\\n            [monthviewEventDetailTemplate]=\\\"monthView\\\"\\n            [noEventsLabel]=\\\"calendar.noEventsLabel\\\"\\n            (onCurrentDateChanged)=\\\"onCurrentDateChanged($event)\\\"\\n            (onRangeChanged)=\\\"reloadSource(startTime, endTime)\\\"\\n            (onEventSelected)=\\\"onEventSelected($event)\\\"\\n            (onTitleChanged)=\\\"onViewTitleChanged($event)\\\"\\n            (onTimeSelected)=\\\"onTimeSelected($event)\\\"\\n            step=\\\"30\\\">\\n  </calendar>\\n\\n  <ng-template #monthView let-showEventDetail=\\\"showEventDetail\\\" let-selectedDate=\\\"selectedDate\\\" let-noEventsLabel=\\\"noEventsLabel\\\">\\n    <ion-list class=\\\"event-detail-container\\\" has-bouncing=\\\"false\\\" *ngIf=\\\"showEventDetail\\\">\\n      <ion-item *ngFor=\\\"let event of selectedDate?.events\\\" (click)=\\\"eventSelected(event)\\\">\\n        <ion-grid class=\\\" esame\\\" no-padding>\\n          <ion-row>\\n            <ion-col size=\\\"3\\\" text-wrap><b>Orario</b></ion-col>\\n            <ion-col size=\\\"9\\\" text-wrap>{{event.startTime|date: 'HH:mm'}} - {{event.endTime|date: 'HH:mm'}}</ion-col>\\n          </ion-row>\\n          <ion-row *ngIf=\\\"event.title\\\">\\n            <ion-col size=\\\"3\\\" text-wrap><b>Evento</b></ion-col>\\n            <ion-col size=\\\"9\\\" text-wrap>{{event.title}}</ion-col>\\n          </ion-row>\\n          <ion-row  *ngIf=\\\"event.docente\\\">\\n            <ion-col size=\\\"3\\\" text-wrap><b>Docente</b></ion-col>\\n            <ion-col size=\\\"9\\\" text-wrap>{{event.docente}}</ion-col>\\n          </ion-row>\\n          <ion-row  *ngIf=\\\"event.aula\\\">\\n            <ion-col size=\\\"3\\\" text-wrap><b>Aula</b></ion-col>\\n            <ion-col size=\\\"9\\\" text-wrap>{{event.aula}}</ion-col>\\n          </ion-row>\\n        </ion-grid>\\n      </ion-item>\\n      <ion-item *ngIf=\\\"selectedDate?.events.length==0\\\">\\n        <div class=\\\"no-events-label\\\">{{noEventsLabel}}</div>\\n      </ion-item>\\n    </ion-list>\\n  </ng-template>\\n\\n  -->\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { CalendarioPage } from './calendario';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: CalendarioPage\n            }\n        ])\n    ],\n    declarations: [CalendarioPage]\n})\nexport class CalendarioPageModule {}\n","import {Component, OnInit} from '@angular/core';\nimport { AlertController, NavParams, ToastController } from '@ionic/angular';\n// import * as moment from 'moment';\nimport {SyncService} from '../../../services/sync.service';\nimport {GlobalDataService} from '../../../services/global-data.service';\nimport {HttpService} from '../../../services/http.service';\n\n/**\n * Generated class for the CalendarioPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@Component({\n    selector: 'app-page-calendario',\n    templateUrl: 'calendario.html',\n})\nexport class CalendarioPage implements OnInit {\n    idServizio = 17;\n    eventi: Array<any> = [];\n    dataAggiornamento: string;\n    eventSource = [];\n    viewTitle: string;\n    selectedDay = new Date();\n    aggiornamentoVerificato = false;\n\n    calendar = {\n        mode: 'month',\n        currentDate: new Date(),\n        // locale: 'it-IT',\n        autoSelect: false,\n        noEventsLabel: 'Nessun evento',\n\n    };\n\n    constructor(\n        public navParams: NavParams,\n        public sync: SyncService,\n        public http: HttpService,\n        public globalData: GlobalDataService,\n        public toastCtrl: ToastController,\n        public alertCtrl: AlertController) {\n    }\n\n\n    ngOnInit() {\n        this.http.getConnected();\n        // this.aggiorna(false, true);\n    }\n\n    /*\n\n    onViewTitleChanged(title) {\n        this.viewTitle = title;\n    }\n\n    onCurrentDateChanged(title) {\n    }\n\n    onEventSelected(evento) {\n        this.alertCtrl.create({\n            header: moment(evento.startTime).format('LLL'),\n            subHeader: evento.title,\n            buttons: ['Chiudi']\n        }).then(alert => alert.present());\n    }\n\n    eventSelected(evento) {\n        this.alertCtrl.create({\n            header: moment(evento.startTime).format('LLL'),\n            subHeader: evento.title,\n            buttons: ['Chiudi']\n        }).then(alert => alert.present());\n    }\n\n    onTimeSelected(ev) {\n        this.selectedDay = ev.selectedTime;\n    }\n\n    swapView() {\n        if ( this.calendar.mode === 'month' ) {\n            this.calendar.mode = 'week';\n        } else {\n            this.calendar.mode = 'month';\n        }\n    }\n\n    today() {\n        this.calendar.currentDate = new Date();\n    }\n\n    caricaEventi() {\n        const events = [];\n        for (const evento of this.eventi) {\n\n            const start = moment(evento.start.date).toDate();\n            const end =  moment(evento.end.date).toDate();\n\n            if (evento.start.date === evento.end.date) {\n                end.setHours(end.getHours() + 2);\n            }\n\n            events.push({\n                tipo: evento.tipo,\n                title: evento.description,\n                startTime: start,\n                endTime: end,\n                aula: evento.aula,\n                docente: evento.docente,\n                allDay: false\n            });\n        }\n        this.eventSource = [];\n        setTimeout(() => {\n            this.eventSource = events;\n        });\n\n        // events.push({\n        //         title: 'Ingegneria del Software e laboratorio',\n        //         startTime: new Date('2017-12-28 11:00:00'),\n        //         endTime: new Date('2017-12-28 13:00:00'),\n        //         aula: 'Aula Informatica - B. Pascal',\n        //         allDay: false\n        //     });\n        //\n        // events.push({\n        //     title: 'Ingegneria del Software',\n        //     startTime: new Date('2017-12-29 11:00:00'),\n        //     endTime: new Date('2017-12-29 13:00:00'),\n        //     docente: 'Prof. Fasano',\n        //     aula: 'Aula Informatica - B. Pascal',\n        //     allDay: false\n        // });\n        // events.push({\n        //     title: 'Programmazione Web e Mobile',\n        //     startTime: new Date('2017-12-29 14:00:00'),\n        //     endTime: new Date('2017-12-29 16:00:00'),\n        //     docente: 'Prof. Fasano',\n        //     aula: 'Aula Pesche - M. Curie',\n        //     allDay: false\n        // });\n    }\n\n    isLoading() {\n        return this.sync.loading[this.idServizio];\n    }\n\n    // Recupera i dati tramite il sincronizzatore\n    // il parametro interattivo indica se mostrare il refresher durante il recupero dei dati dal server\n    aggiorna(interattivo: boolean, sync: boolean) {\n        // Se ancora stiamo caricando i dati dall'ultima richiesta Ã¨ inutile forzare un secondo aggiornamento\n        if (this.isLoading()) {\n            return;\n        }\n\n        this.sync.getJson(this.idServizio, sync).then(\n            (data) => {\n                this.eventi = data[0];\n                this.dataAggiornamento = SyncService.dataAggiornamento(data);\n                this.caricaEventi();\n                setTimeout(() => {\n                    this.controllaAggiornamento();\n                }, 1000);\n            },\n            (err) => {\n                console.log('REJECT ' + err);\n                if (interattivo) {\n                    this.toastCtrl.create({\n                        message: 'Non Ã¨ stato possibile recuparate i dati dal server. Riprovare piÃ¹ tardi.',\n                        duration: 3000\n                    }).then( (toast) => {toast.present(); }, (toastErr) => { GlobalDataService.log(2, 'Toast fallito!', toastErr); });\n                }\n\n            }).catch(err => {\n                console.log('CATCH ' + err);\n                if (interattivo) {\n                    this.toastCtrl.create({\n                        message: 'Non Ã¨ stato possibile recuparate i dati dal server. Riprovare piÃ¹ tardi.',\n                        duration: 3000\n                    }).then( (toast) => {toast.present(); }, (toastErr) => { GlobalDataService.log(2, 'Toast fallito!', toastErr); });\n                }\n            }\n        );\n    }\n\n    controllaAggiornamento() {\n        // La verifica dell'aggiornamento in background la facciamo solo una volta\n        if (this.aggiornamentoVerificato) {\n            return;\n        }\n\n        // Se stiamo caricando dati dal server rimandiamo la verifica\n        if (this.sync.loading[this.idServizio]) {\n            setTimeout(() => {\n                this.controllaAggiornamento();\n            }, 1000);\n        } else {\n            this.aggiornamentoVerificato = true;\n            this.aggiorna(false, false);\n        }\n    }\n\n    doRefresh(refresher) {\n        if (refresher) {\n            refresher.complete();\n        }\n\n        if (this.isLoading()) {\n            return;\n        }\n\n        this.aggiorna(true, true);\n    }\n\n    date2string(stringDate): string {\n        return GlobalDataService.formatStringDateTime(stringDate, '-', ':');\n    }\n    */\n\n}\n"],"sourceRoot":""}