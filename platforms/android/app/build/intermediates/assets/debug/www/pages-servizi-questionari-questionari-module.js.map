{"version":3,"sources":["webpack:///./src/app/pages/servizi/questionari/questionari.html","webpack:///./src/app/pages/servizi/questionari/questionari.module.ts","webpack:///./src/app/pages/servizi/questionari/questionari.ts"],"names":[],"mappings":"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","file":"pages-servizi-questionari-questionari-module.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-grid no-padding>\\n    <ion-row *ngIf=\\\"!globalData.landscape && globalData.iPhoneX\\\">\\n      <ion-col>\\n        <ion-label> </ion-label>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row no-padding>\\n      <ion-col no-padding>\\n        <ion-toolbar>\\n          <ion-buttons slot=\\\"start\\\">\\n            <ion-menu-button></ion-menu-button>\\n          </ion-buttons>\\n          <ion-title>\\n            Questionari di valutazione\\n          </ion-title>\\n        </ion-toolbar>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-header>\\n\\n\\n<ion-content>\\n  <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"false\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\n    <ion-refresher-content></ion-refresher-content>\\n  </ion-refresher>\\n\\n  <ion-grid *ngIf=\\\"!questionari || questionari?.length == 0 && rinvioAggiornamento\\\" text-center>\\n    <ion-row>\\n      <ion-col text-center>\\n        <img class=\\\"progress\\\" src=\\\"assets/img/progress.gif\\\" />\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col text-center>\\n        <ion-title><strong>Aggiornamento in corso</strong></ion-title>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col text-center>\\n        <ion-label>un attimo di pazienza</ion-label>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n  <ion-list *ngIf=\\\"questionariCompilati && questionariCompilati?.length > 0 && !rinvioAggiornamento\\\">\\n    <ion-list-header>\\n      COMPILATI\\n    </ion-list-header>\\n    <ion-item ion-item *ngFor=\\\"let item of questionariCompilati\\\">\\n      <ion-grid fixed no-padding>\\n        <ion-row>\\n          <ion-col size=\\\"1\\\" align-self-center=\\\"true\\\">\\n            <ion-icon name=\\\"radio-button-on\\\" color=\\\"secondary\\\"></ion-icon>\\n          </ion-col>\\n          <ion-col align-self-center=\\\"true\\\">\\n            <ion-label text-wrap>{{ item }}</ion-label>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-item>\\n    <ion-item *ngIf=\\\"questionariCompilati?.length==0\\\">\\n      <ion-label text-wrap>Nessun questionario compilato</ion-label>\\n    </ion-item>\\n  </ion-list>\\n\\n  <ion-list *ngIf=\\\"questionariDaCompilare && questionariDaCompilare?.length > 0 && !rinvioAggiornamento\\\">\\n    <ion-list-header>\\n      DA COMPILARE\\n    </ion-list-header>\\n    <ion-item *ngIf=\\\"questionariDaCompilare?.length==0\\\">\\n      <ion-label text-wrap>Nessun questionario da compilare</ion-label>\\n    </ion-item>\\n\\n    <ion-item ion-item *ngFor=\\\"let item of questionariDaCompilare\\\">\\n      <ion-grid fixed no-padding>\\n        <ion-row>\\n          <ion-col size=\\\"1\\\" align-self-center=\\\"true\\\">\\n            <ion-icon name=\\\"radio-button-on\\\" color=\\\"primary\\\"></ion-icon>\\n          </ion-col>\\n          <ion-col align-self-center=\\\"true\\\">\\n            <ion-label text-wrap=\\\"\\\">{{ item }}</ion-label>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>s\\n    </ion-item>\\n\\n  </ion-list>\\n\\n  <ion-list *ngIf=\\\"!rinvioAggiornamento\\\" >\\n    <ion-list-header>\\n      NON DISPONIBILI\\n    </ion-list-header>\\n    <ion-item ion-item *ngFor=\\\"let item of questionariNonDisponibili\\\">\\n      <ion-grid fixed no-padding>\\n        <ion-row>\\n          <ion-col size=\\\"1\\\" align-self-center=\\\"true\\\">\\n            <ion-icon name=\\\"radio-button-on\\\" color=\\\"danger\\\"></ion-icon>\\n          </ion-col>\\n          <ion-col align-self-center=\\\"true\\\">\\n            <ion-label text-wrap=\\\"\\\">{{ item }}</ion-label>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-item>\\n    <ion-item *ngIf=\\\"questionariNonDisponibili?.length==0\\\">\\n      <ion-label text-wrap>Nessun questionario disponibile</ion-label>\\n    </ion-item>\\n  </ion-list>\\n\\n</ion-content>\\n\\n<ion-footer  no-padding>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-spinner [hidden]=\\\"!isLoading() || !http.getConnected()\\\"></ion-spinner>\\n      <fa-icon [hidden]=\\\"isLoading() || !http.getConnected()\\\" [icon]=\\\"globalData.faLink\\\"></fa-icon>\\n      <fa-icon [hidden]=\\\"isLoading() || http.getConnected()\\\"  [icon]=\\\"globalData.faUnlink\\\"></fa-icon>\\n    </ion-buttons>\\n\\n    <div class=\\\"testo-footer\\\">\\n      Aggiornato al: {{dataAggiornamento}}\\n    </div>\\n\\n    <ion-buttons slot=\\\"end\\\" no-padding>\\n      <ion-icon slot=\\\"icon-only\\\" src=\\\"assets/icon/blank.png\\\"></ion-icon>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-footer>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { QuestionariPage } from './questionari';\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        FontAwesomeModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: QuestionariPage\n            }\n        ])\n    ],\n    declarations: [QuestionariPage]\n})\nexport class QuestionariPageModule {}\n","import {Component, OnInit} from '@angular/core';\nimport {ToastController} from '@ionic/angular';\nimport {Storage } from '@ionic/storage';\nimport {SyncService} from '../../../services/sync.service';\nimport {GlobalDataService} from '../../../services/global-data.service';\nimport {AccountService} from '../../../services/account.service';\nimport {HttpService} from '../../../services/http.service';\n\n@Component({\n    selector: 'app-page-questionari',\n    templateUrl: 'questionari.html',\n})\n\nexport class QuestionariPage implements OnInit {\n    currentPage = '/questionari';\n    idServizio = 8;\n\n    questionariInizializzati = false;\n    questionari: Array<{ des: String }>;\n    questionariNonDisponibili: Array<{ des: String }>;\n    questionariCompilati: Array<{ des: String }>;\n    questionariDaCompilare: Array<{ des: String }>;\n\n    dataAggiornamento: string;\n    aggiornamentoVerificato = false;\n    rinvioAggiornamento = false;\n    nrRinvii = 0;\n    maxNrRinvii = 5;\n\n    constructor(\n        private toastCtrl: ToastController,\n        public sync: SyncService,\n        public http: HttpService,\n        public storage: Storage,\n        public globalData: GlobalDataService,\n        public account: AccountService) {\n    }\n\n    ngOnInit() {\n        this.globalData.srcPage = '/questionari';\n        this.account.controllaAccount().then(\n            (ok) => {\n                this.http.getConnected();\n                this.aggiorna(false, true);\n            }, (err) => {\n                this.globalData.goTo(this.currentPage, '/login', 'root', false);\n            }\n        );\n    }\n\n    aggiorna(interattivo: boolean, sync: boolean) {\n        if (this.sync.loading[this.idServizio]) {\n            this.rinvioAggiornamento = true;\n            this.dataAggiornamento = 'in corso';\n            this.nrRinvii++;\n\n            // console.log('Rinvio ' + this.nrRinvii);\n\n            if (this.nrRinvii < this.maxNrRinvii) {\n                setTimeout(() => {\n                    this.aggiorna(interattivo, sync);\n                }, 2000);\n                return;\n            } else {\n                if (this.http.connessioneLenta) {\n                    this.toastCtrl.create({\n                        message: 'La connessione è assente o troppo lenta. Riprova ad aggiornare i dati più tardi.',\n                        duration: 3000,\n                        position: 'bottom'\n                    }).then(\n                        (toast) => {toast.present(); },\n                        (toastErr) => { GlobalDataService.log(2, 'Toast fallito!', toastErr); });\n                }\n            }\n        }\n        this.rinvioAggiornamento = false;\n        this.nrRinvii = 0;\n\n        this.sync.getJson(this.idServizio, true).then(\n            (data) => {\n                this.parseQuestionari(data);\n                this.dataAggiornamento = SyncService.dataAggiornamento(data);\n                setTimeout(() => {\n                    this.controllaAggiornamento();\n                }, 1000);\n            },\n            (err) => {\n            }).catch(err => {\n            }\n        );\n    }\n\n    controllaAggiornamento() {\n        // La verifica dell'aggiornamento in background la facciamo solo una volta\n        if (this.aggiornamentoVerificato) {\n            return;\n        }\n\n        // Se stiamo caricando dati dal server rimandiamo la verifica\n        if (this.sync.loading[this.idServizio]) {\n            setTimeout(() => {\n                this.controllaAggiornamento();\n            }, 1000);\n        } else {\n            this.aggiornamentoVerificato = true;\n            this.aggiorna(false, false);\n        }\n    }\n\n    isLoading() {\n        return this.sync.loading[this.idServizio];\n    }\n\n    doRefresh(refresher) {\n        if (refresher) {\n            refresher.target.complete();\n        }\n        this.aggiorna(true, true);\n    }\n\n\n    parseQuestionari(listaQuestionari: any) {\n        // console.dir(listaQuestionari);\n        if (!this.questionariInizializzati || JSON.stringify(this.questionari) !== JSON.stringify(listaQuestionari)) {\n            this.questionariInizializzati = true;\n            this.questionari = listaQuestionari;\n            this.questionariNonDisponibili = [];\n            this.questionariCompilati = [];\n            this.questionariDaCompilare = [];\n\n            let contNonDisponibili = 0;\n            let contCompilati = 0;\n            let contDaCompilare = 0;\n\n            const iter = Object.keys(listaQuestionari).length;\n\n            for (let i = 0; i < iter - 2; i++) {\n                if (listaQuestionari[i].adsce_id && listaQuestionari[i].stato === 0) {\n                    this.questionariNonDisponibili[contNonDisponibili] = listaQuestionari[i].des;\n                    contNonDisponibili++;\n                } else if (listaQuestionari[i].adsce_id && listaQuestionari[i].stato === 1) {\n                    this.questionariCompilati[contCompilati] = listaQuestionari[i].des;\n                    contCompilati++;\n                } else if (listaQuestionari[i].adsce_id) {\n                    this.questionariDaCompilare[contDaCompilare] = listaQuestionari[i].des;\n                    contDaCompilare++;\n                }\n            }\n        }\n    }\n\n\n}\n"],"sourceRoot":""}