{"version":3,"sources":["webpack:///./src/app/pages/account/accounts/accounts.module.ts","webpack:///./src/app/pages/account/accounts/accounts.page.html","webpack:///./src/app/pages/account/accounts/accounts.page.scss","webpack:///./src/app/pages/account/accounts/accounts.page.ts"],"names":[],"mappings":"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","file":"pages-account-accounts-accounts-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AccountsPage } from './accounts.page';\nimport {FontAwesomeModule} from '@fortawesome/angular-fontawesome';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    FontAwesomeModule,\n      RouterModule.forChild([\n          {\n              path: '',\n              component: AccountsPage\n          }\n      ])\n  ],\n  declarations: [AccountsPage]\n})\nexport class AccountsPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-grid no-padding>\\n    <ion-row *ngIf=\\\"!globalData.landscape && globalData.iPhoneX\\\">\\n      <ion-col>\\n        <ion-label> </ion-label>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row no-padding>\\n      <ion-col no-padding>\\n        <ion-toolbar>\\n          <ion-buttons slot=\\\"start\\\">\\n            <ion-menu-button></ion-menu-button>\\n          </ion-buttons>\\n          <ion-title>\\n            Accounts {{nrAccounts}}\\n          </ion-title>\\n          <ion-buttons slot=\\\"end\\\">\\n            <ion-back-button defaultHref=\\\"/preferenze\\\" text=\\\"Indietro\\\"></ion-back-button>\\n          </ion-buttons>\\n        </ion-toolbar>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-header>\\n\\n\\n<ion-content>\\n  <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"false\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\n    <ion-refresher-content></ion-refresher-content>\\n  </ion-refresher>\\n\\n  <ion-grid *ngIf=\\\"!accounts || accounts?.length == 0 && rinvioAggiornamento\\\" text-center>\\n    <ion-row>\\n      <ion-col text-center>\\n        <img class=\\\"progress\\\" src=\\\"assets/img/progress.gif\\\" />\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col text-center>\\n        <ion-title><strong>Aggiornamento in corso</strong></ion-title>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col text-center>\\n        <ion-label>un attimo di pazienza</ion-label>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n\\n  <ion-item *ngIf=\\\"!rinvioAggiornamento && accounts?.length == 0\\\" text-center>\\n    <h3>Dati non disponibili</h3>\\n  </ion-item>\\n\\n  <ion-list *ngIf=\\\"accounts?.length > 0\\\" >\\n    <ion-item-sliding no-padding  *ngFor=\\\"let account of accounts\\\">\\n\\n      <ion-item (click)=\\\"onPress(account)\\\" [ngClass]=\\\"{'locale' : account.token == tokenLocale}\\\">\\n\\n        <ion-grid no-padding fixed>\\n          <ion-row>\\n            <ion-col size=\\\"2\\\" align-items-start=\\\"true\\\" align-self-center=\\\"true\\\">\\n              <img class=\\\"logo-mini\\\" src=\\\"./assets/img/{{this.selezionaIcona(account)}}\\\" />\\n            </ion-col>\\n            <ion-col size=\\\"10\\\">\\n              <ion-grid no-padding>\\n                <ion-row>\\n                  <ion-col size=\\\"4\\\">Data</ion-col>\\n                  <ion-col text-wrap>{{this.timestamp2string(account.ultimo_accesso)}}</ion-col>\\n                </ion-row>\\n                <ion-row>\\n                  <ion-col size=\\\"4\\\">Matr.</ion-col>\\n                  <ion-col text-wrap>{{account.matricola}}</ion-col>\\n                </ion-row>\\n                <ion-row *ngIf=\\\"account.virtual\\\">\\n                  <ion-col >Dispositivo virtuale</ion-col>\\n                </ion-row>\\n                <ion-row *ngIf=\\\"account.manufacturer\\\">\\n                  <ion-col size=\\\"4\\\">Device</ion-col>\\n                  <ion-col text-wrap>{{account.manufacturer}} {{account.model}}</ion-col>\\n                </ion-row>\\n                <ion-row *ngIf=\\\"account.platform\\\">\\n                  <ion-col size=\\\"4\\\">S.O.</ion-col>\\n                  <ion-col text-wrap>{{account.platform}} {{account.os_version}}</ion-col>\\n                </ion-row>\\n                <ion-row *ngIf=\\\"account.app_version\\\">\\n                  <ion-col size=\\\"4\\\">Ver. App</ion-col>\\n                  <ion-col text-wrap>{{account.app_version}}</ion-col>\\n                </ion-row>\\n              </ion-grid>\\n            </ion-col>\\n          </ion-row>\\n        </ion-grid>\\n      </ion-item>\\n\\n\\n      <!--<ion-list [hidden]=\\\"accounts?.length == 0\\\"  *ngFor=\\\"let account of accounts\\\">\\n        <ion-item (press)=\\\"onPress(account)\\\" [ngClass]=\\\"{'locale' : account.token == tokenLocale}\\\">\\n          <ion-grid>\\n            <ion-row>\\n              <ion-col>Ultimo Accesso:</ion-col>\\n              <ion-col text-wrap>{{this.timestamp2string(account.ultimo_accesso)}}</ion-col>\\n            </ion-row>\\n            <ion-row>\\n              <ion-col>Matricola:</ion-col>\\n              <ion-col text-wrap>{{account.matricola}}</ion-col>\\n            </ion-row>\\n            <ion-row *ngIf=\\\"!account.virtual\\\">\\n              <ion-col>Dispositivo virtuale</ion-col>\\n            </ion-row>\\n            <ion-row *ngIf=\\\"account.manufacturer\\\">\\n              <ion-col>Produttore:</ion-col>\\n              <ion-col text-wrap>{{account.manufacturer}}</ion-col>\\n            </ion-row>\\n            <ion-row *ngIf=\\\"account.model\\\">\\n              <ion-col>Modello:</ion-col>\\n              <ion-col text-wrap>{{account.model}}</ion-col>\\n            </ion-row>\\n            <ion-row *ngIf=\\\"account.platform\\\">\\n              <ion-col>SO:</ion-col>\\n              <ion-col text-wrap>{{account.platform}} {{account.os_version}}</ion-col>\\n            </ion-row>\\n            <ion-row *ngIf=\\\"account.app_version\\\">\\n              <ion-col>Versione App:</ion-col>\\n              <ion-col text-wrap>{{account.app_version}}</ion-col>\\n            </ion-row>\\n          </ion-grid>\\n\\n        </ion-item>\\n      <!--</ion-list>-->\\n\\n      <ion-item-options side=\\\"end\\\" slot=\\\"top\\\">\\n        <ion-item-option *ngIf=\\\"account.token != tokenLocale\\\" (click)=\\\"disconnetti(account)\\\">\\n          <ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon>\\n        </ion-item-option>\\n      </ion-item-options>\\n    </ion-item-sliding>\\n\\n  </ion-list>\\n\\n</ion-content>\\n\\n<ion-footer  no-padding>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-spinner [hidden]=\\\"!isLoading() || !http.getConnected()\\\"></ion-spinner>\\n      <fa-icon [hidden]=\\\"isLoading() || !http.getConnected()\\\" [icon]=\\\"globalData.faLink\\\"></fa-icon>\\n      <fa-icon [hidden]=\\\"isLoading() || http.getConnected()\\\"  [icon]=\\\"globalData.faUnlink\\\"></fa-icon>\\n    </ion-buttons>\\n\\n    <div class=\\\"testo-footer\\\">\\n      Aggiornato al: {{dataAggiornamento}}\\n    </div>\\n\\n    <ion-buttons slot=\\\"end\\\" no-padding>\\n      <ion-icon slot=\\\"icon-only\\\" src=\\\"assets/icon/blank.png\\\"></ion-icon>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-footer>\"","module.exports = \".locale {\\n  background-color: #9eeeb6 !important; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnRvbmlvX21hc3Ryb3Bhb2xvL0Rlc2t0b3AvbW9kaWZpY2hlQVBQL3N0dWRlbnRpLW1hc3Rlci9zcmMvYXBwL3BhZ2VzL2FjY291bnQvYWNjb3VudHMvYWNjb3VudHMucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usb0NBQW9DLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9hY2NvdW50L2FjY291bnRzL2FjY291bnRzLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5sb2NhbGUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOWVlZWI2ICFpbXBvcnRhbnQ7XG59Il19 */\"","import {Component, NgZone, OnInit} from '@angular/core';\nimport {ActionSheetController, LoadingController, ToastController} from '@ionic/angular';\nimport {SyncService} from '../../../services/sync.service';\nimport {GlobalDataService} from '../../../services/global-data.service';\n// import {Http} from '@angular/http';\n\nimport {Storage} from '@ionic/storage';\nimport {AccountService} from '../../../services/account.service';\nimport {HttpService} from '../../../services/http.service';\n\n@Component({\n    selector: 'app-page-accounts',\n    templateUrl: './accounts.page.html',\n    styleUrls: ['./accounts.page.scss'],\n})\nexport class AccountsPage implements OnInit {\n\n    currentPage = '/accounts';\n    idServizio = 19;\n    accounts: Array<any> = [];\n    dataAggiornamento = '';\n    aggiornamentoVerificato = false;\n    rinvioAggiornamento = false;\n    nrRinvii = 0;\n    maxNrRinvii = 5;\n    tokenLocale = '';\n    nrAccounts = '';\n\n    constructor(\n        public toastCtrl: ToastController,\n        public ngZone: NgZone,\n        public http: HttpService,\n        public storage: Storage,\n        public sync: SyncService,\n        public loadingCtrl: LoadingController,\n        public actionSheetCtrl: ActionSheetController,\n        public globalData: GlobalDataService,\n        public account: AccountService) {\n    }\n\n    ngOnInit() {\n        this.globalData.srcPage = this.currentPage;\n\n        this.account.controllaAccount().then(\n            (ok) => {\n                this.storage.get('token').then((val) => {\n                    this.tokenLocale = val;\n                }, (err) => {\n                    //\n                });\n                this.http.getConnected();\n                this.aggiorna(false, true);\n            }, (err) => {\n                this.globalData.goTo(this.currentPage, '/login', 'root', false);\n            }\n        );\n    }\n\n\n    // Restituisce lo stato di eventuali richieste di sincronizzazione per il JSON associato al servizio\n    isLoading() {\n        return this.sync.loading[this.idServizio];\n    }\n\n    // Recupera i dati tramite il sincronizzatore\n    aggiorna(interattivo: boolean, sync: boolean) {\n        if (this.sync.loading[this.idServizio]) {\n            this.rinvioAggiornamento = true;\n            this.dataAggiornamento = 'in corso';\n            this.nrRinvii++;\n\n            // console.log('Rinvio ' + this.nrRinvii);\n\n            if (this.nrRinvii < this.maxNrRinvii) {\n                setTimeout(() => {\n                    this.aggiorna(interattivo, sync);\n                }, 2000);\n                return;\n            } else {\n                if (this.http.connessioneLenta) {\n                    this.toastCtrl.create({\n                        message: 'La connessione è assente o troppo lenta. Riprova ad aggiornare i dati più tardi.',\n                        duration: 3000,\n                        position: 'bottom'\n                    }).then( (toast) => {toast.present(); }, (toastErr) => { GlobalDataService.log(2, 'Toast fallito!', toastErr); });\n                }\n            }\n        }\n        this.rinvioAggiornamento = false;\n        this.nrRinvii = 0;\n\n        this.sync.getJson(this.idServizio, sync).then(\n            (data) => {\n                // if (this.sync.dataIsChanged(this.accounts, data[0]))\n                if ( this.sync.dataIsChanged(this.accounts, data[0]) ) {\n                    // if (JSON.stringify(this.accounts) !== JSON.stringify(data[0])) {\n                    this.accounts = data[0];\n                    if (this.accounts) {\n                        this.nrAccounts = '(' + this.accounts.length + ')';\n                    } else {\n                        GlobalDataService.log(1, 'Nessun account per l\\'utente!', null);\n                        this.accounts = [];\n                        this.nrAccounts = '';\n                    }\n\n                    this.sync.dataIsChanged(this.accounts, data[0]);\n                    // if (interattivo) loading.dismiss();\n                    setTimeout(() => {\n                        this.controllaAggiornamento();\n                    }, 1000);\n                }\n                this.dataAggiornamento = SyncService.dataAggiornamento(data);\n            },\n            (err) => {\n                if (interattivo) {\n                    this.toastCtrl.create({\n                        message: 'Non è stato possibile recuparate i dati dal server. Riprovare più tardi.',\n                        duration: 3000\n                    }).then(\n                        (toast) => {toast.present(); },\n                        (toastErr) => {\n                            GlobalDataService.log(2, 'Toast fallito!', toastErr);\n                        });\n                    // loading.dismiss();\n                }\n            }).catch(err => {\n                GlobalDataService.log(2, 'Eccezione ', err);\n                // if (interattivo) loading.dismiss();\n            }\n        );\n    }\n\n    controllaAggiornamento() {\n        // La verifica dell'aggiornamento in background la facciamo solo una volta\n        if (this.aggiornamentoVerificato) {\n            return;\n        }\n        // Se stiamo caricando dati dal server rimandiamo la verifica\n        if (this.sync.loading[this.idServizio]) {\n            setTimeout(() => {\n                this.controllaAggiornamento();\n            }, 1000);\n        } else {\n            this.aggiornamentoVerificato = true;\n            this.aggiorna(false, false);\n        }\n    }\n\n    doRefresh(refresher) {\n        this.aggiorna(true, true);\n        if (refresher) {\n            refresher.target.complete();\n        }\n    }\n\n\n    selezionaIcona(item) {\n        let nomeIcona = '';\n        switch (item.platform) {\n            case 'iOS':\n                // nomeIcona = 'apple.svg';\n                nomeIcona = 'apple2.svg';\n                break;\n            case 'Android':\n                nomeIcona = 'android2.svg';\n                break;\n            case 'windows':\n                nomeIcona = 'windows2.svg';\n                break;\n            case 'amazon-fireos':\n                nomeIcona = 'amazon2.svg';\n                break;\n            default:\n                nomeIcona = 'unimol2.svg';\n                break;\n        }\n\n        return nomeIcona;\n    }\n\n    onPress(item) {\n        this.actionSheetCtrl.create({\n            header: 'Disconnessione',\n            buttons: [\n                {\n                    text: 'Disconnetti',\n                    icon: 'trash',\n                    handler: () => {\n                        this.disconnetti(item);\n                    }\n                }, {\n                    text: 'Chiudi',\n                    role: 'cancel',\n                    icon: 'close',\n                    handler: () => {\n                        // console.log('Cancel clicked');\n                    }\n                }\n            ]\n        }).then(actionSheet => actionSheet.present());\n    }\n\n    disconnetti(item) {\n        if (item.token === this.tokenLocale || item.token === 'test') {\n            this.toastCtrl.create({\n                message: 'Per disconnettere il dispositivo in uso da questa schermata. ' +\n                'Usare la funzione Disconnetti nel menu laterale.',\n                duration: 5000\n            }).then( (toast) => {toast.present(); }, (toastErr) => { GlobalDataService.log(2, 'Toast fallito!', toastErr); });\n        } else {\n            this.account.disconnetti(item.token).then(\n                () => {\n                    this.globalData.goTo(this.currentPage, '/preferenze', 'back', false);\n                }, (err) => {\n                    this.aggiorna(true, true);\n                    GlobalDataService.log(2, 'Disconnessione fallita!', err);\n                }\n            );\n            //\n            // let body;\n            //\n            // body = JSON.stringify({\n            //     token: item.token,\n            // });\n            //\n            // this.loadingCtrl.create({\n            //     message: 'Attendere...'\n            // }).then(loading => {\n            //\n            //     loading.present();\n            //\n            //     this.ngZone.run(() => {\n            //\n            //         this.http.post(this.sync.getUrlDisconnetti(), body, {})\n            //             .pipe(timeout(this.sync.getTimeout()))\n            //             .subscribe(\n            //                 data => {\n            //                     loading.dismiss();\n            //                     if (data) {\n            //                         this.toastCtrl.create({\n            //                             message: 'Il dispositivo è stato disconnesso.',\n            //                             duration: 5000\n            //                         }).then(\n            //                             (toast) => {toast.present(); },\n            //                             (toastErr) => {\n            //                                 GlobalDataService.log(2, 'Toast fallito!', toastErr);\n            //                             });\n            //                         // this.navCtrl.pop();\n            //                         this.navCtrl.navigateBack('/preferenze').then(\n            //                             () => { },\n            //                             (errNavigate => {\n            //                                 GlobalDataService.log(\n            //                                     2,\n            //                                     'Errore nella chiamata al NavController ',\n            //                                     errNavigate);\n            //                             }));\n            //                     } else {\n            //                         this.toastCtrl.create({\n            //                             message: 'Si è verificato un problema durante l\\'elaborazione della richiesta.',\n            //                             duration: 5000\n            //                         }).then(\n            //                             (toast) => {toast.present(); },\n            //                             (toastErr) => {\n            //                                 GlobalDataService.log(2, 'Toast fallito!', toastErr);\n            //                             });\n            //                         // this.navCtrl.pop();\n            //                         this.navCtrl.navigateBack('/preferenze').then(\n            //                             () => { },\n            //                             (errNavigate => {\n            //                                 GlobalDataService.log(\n            //                                     2,\n            //                                     'Errore nella chiamata al NavController ',\n            //                                     errNavigate);\n            //                             }));\n            //                     }\n            //                     this.aggiorna(true, true);\n            //                 },\n            //                 err => {\n            //                     loading.dismiss();\n            //                     GlobalDataService.log(\n            //                         2,\n            //                         'Nessuna connessione ad Internet',\n            //                         err);\n            //                     this.toastCtrl.create({\n            //                         message: 'Nessuna connessione ad Internet. ' +\n            //                         'Per poter scollegare un dispoditivo devi essere connesso ad Internet.',\n            //                         duration: 10000\n            //                     }).then(\n            //                         (toast) => {toast.present(); },\n            //                         (toastErr) => {\n            //                             GlobalDataService.log(2, 'Toast fallito!', toastErr);\n            //                         });\n            //                 });\n            //     });\n            // });\n        }\n    }\n\n    timestamp2string(date): string {\n        return GlobalDataService.timestamp2string(date);\n    }\n\n}\n"],"sourceRoot":""}